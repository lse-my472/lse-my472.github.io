---
title: "Seminar 2 Exercises (Part 2)"
subtitle: "LSE MY472: Data for Data Scientists"
date-modified: "8 October 2025"
date-format: "D MMMM YYYY"
format:
  html:
    embed-resources: true
    toc: true
    mathjax: true
execute:
  echo: true
  eval: false
---

Please fill the empty chunks below with your own answers. When you do this, please _remove_ the comment saying `# your code goes here` (or any similar message).

You will typically need to run each chunk after you finalise your answer in that chunk, because subsequent chunks will typically build/rely on work from previous chunks. 

When the seminar ends, you will need to compile this `.qmd` to `.html` (using the Preview button above) and then add/commit/push your version of the `.qmd` file and the `.html` file to your GitHub Classrooms repository. 

::: {.callout-note}
Do not worry if your solutions are incomplete when you push to GitHub at the end of seminar. We expect that most students will not finish the exercises during seminar. However, you should continue to work on the exercises after seminar and then add/commit/push a final version before the next seminar begins.
:::

### Directory management

Before beginning, set your working directory.

```{r}
# your code goes here
```

## Exercise 4: Creating data in memory in R

Navigate to the `week02` directory in the GitHub repo for the course website: <https://github.com/lse-my472/lse-my472.github.io/tree/master/week02>. Then, make an object called `week02.files` that contains contains the file names of the `.qmd` files containing this week's seminar exercises.

```{r}
# your code goes here
```

Inspect the object type of `week02.files`, and include a comment under your code that describes what kind of R object this is.

```{r}
# your code goes here
```

Load the `{pryr}` package and then find the memory address of the `week02.files` object. Save this address as a new object called `week02.files.add1`.

```{r}
# your code goes here
```

Now, to the `week02.files` object, add all the other `.qmd` files from the seminar, and then sort the vector in alphabetical order. 

```{r}
# your code goes here
```

Get the memory address of `week02.files` again, and store it as a new object `week02.files.add2`. Write a logical expression to test whether the address of the object is the same as it was originally.

```{r}
# your code goes here
```

## Exercise 5: Encoding on the fly

Go to the following Chinese-language news article available on the BBC website: <https://www.bbc.com/zhongwen/articles/cy502vpwqndo/simp>. Copy the headline (in large letters at the top), and then create a new object below called `headline` which is a string containing the text you copied.

```{r}
# your code goes here
```

When you paste the text into an notebook in Positron, most modern computers will treat this as Unicode (assuming a UTF-8 encoding), so it should paste correctly.

Let's now manually change the encoding from UTF-8 to a common Chinese-language encoding: [GB18030](https://en.wikipedia.org/wiki/GB_18030). Using the `iconv()` function, create a newly encoded string called `headline.encoded`.

```{r}
# your code goes here
```

Save this newly encoded text into a new text file in your `Seminar02` directory using `write_file()`

```{r}
# your code goes here
```

Now read the file you just saved back into R using `read_file()`. You should read the text into R twice, creating two objects `headline.read1` and `headline.read2`. For `headline.read1`, do not specify any encoding and for `headline.read2` specify the correct encoding (the one you used above). 

```{r}
# your code goes here
```

Print both `headline.read1` and `headline.read2`. Do you notice any problems?

```{r}
# your code goes here
```

## Exercise 6: Discovering file encodings

There is a file in the `week02` folder on GitHub called `news_article.txt`. Create an object called `remote.file` that contains the direct download URL for this file. Use the same process described in the Set Up section of `03-strings.qmd`. **_Do not navigate to this file directly on the GitHub website._**

```{r}
# your code goes here
```

Using the `{stringr}` package, and then split the `remote.file` object into two new objects called `path.url` and `file.name`. The object `path.url` should contain the full URL to the directory on GitHub that contains the file and the `file.name` object should contain the full name of the file. There are multiple ways to do this, but one way involves the `str_split()` function in `{stringr}`.

```{r}
# your code goes here
```

You will soon download this file to your `Seminar02` directory. Before doing this, create a new object called `local.file` that contains the full path to where you want the file to be stored on your computer (i.e., in your `Seminar02` folder and with the file name `file.name`).

```{r}
# your code goes here
```

Write some code that checks if you already have a copy of this file in your local `Seminar02` directory, and if not, then download it to `Seminar02`. 

```{r}
# your code goes here
```

Once you have downloaded all the files, remove all of the names you have defined in R's memory so far _except_ `wdir` and `local.file` and run R's garbage collector. Hint: subset the object that `ls()` returns by indicating you want everything except those two objects.

```{r}
# your code goes here
```

Read the file you just downloaded into R using `read_file()` using `{readr}` and print the string you just loaded using the `print()` function. When you read the file into R as an object, assign the name `news` to it.

```{r}
# your code goes here
```

Figure out the encoding of the file.

```{r}
# your code goes here
```

Re-read the file specifying the correct encoding and print the text using `print()`. When you read in the file with the correct encoding, call the object `news.utf8`. (Why do we know it will be UTF-8? See `03-strings.qmd` for an answer!) What language does it appear to be? 

```{r}
# your code goes here
```

Save a new file called `news_article_UTF8.txt` (with UTF-8 encoding) so that future you will be able to access the text with no problems. Try to open each file using a plain text editor on your computer and notice the difference!

```{r}
# your code goes here
```

## Exercise 8: Some string manipulations

Go to the Methodology course guide: <https://www.lse.ac.uk/resources/calendar2025-2026/courseGuides/graduate.htm#generated-subheading18>. 

For the Methodology courses with course codes between MY470 and MY475, create three vectors:

- one called `my.codes` containing the course codes (e.g., MYXXX) for each course
- one called `my.titles` containing the course titles for each course
- one called `my.convenors` containing the course convenors for each course

You should copy/paste the information directly from the webpage corresponding to each of these four courses.

```{r}
# your code goes here
```

There are two issues with the course convenors in `my.convenors`. First, not all of the listed course convenors have titles. Second, LSE's system does not recognise the umlaut in Ryan HÃ¼bert. Using `str_replace_all()` or `str_replace()`, fix these problems.

```{r}
# your code goes here
```

Next, count how many course titles contain some variation on the word "science". For this, use the `str_detect()` function.

```{r}
# your code goes here
```